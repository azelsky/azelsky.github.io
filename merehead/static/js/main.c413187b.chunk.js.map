{"version":3,"sources":["constants.js","reducer/index.js","reducer/users.js","store/index.js","middlewares/api.js","components/User.jsx","components/UsersList.jsx","components/styled/index.js","components/PageNotFound.jsx","components/Home.jsx","AC/index.js","App.js","serviceWorker.js","index.js"],"names":["LOAD_ALL_USERS","baseURL","proxyUrl","combineReducers","users","arguments","length","undefined","action","type","response","Object","toConsumableArray","enhancer","applyMiddleware","store","next","callAPI","fetch","then","res","json","createStore","reducer","User","_this$props$user","this","props","user","id","name","surname","desc","react_default","a","createElement","Panel","Heading","Title","componentClass","concat","Body","Image","src","replace","rounded","Component","UsersList","Row","Col","xs","map","components_User","key","connect","state","ownProps","filter","index","activePage","LoaderWrapper","styled","div","_templateObject","PageNotFound","Home","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","Number","match","params","currentPage","handlePageChange","bind","assertThisInitialized","pageNumber","setState","loadAllUsers","_this$props","PageNotFound_PageNotFound","components_UsersList","Pagination_default","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","Redirect","to","react_loader_spinner_default","color","height","App","es","HashRouter","Grid","Switch","Route","path","render","_ref","components_Home","from","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c413187b.chunk.js","sourcesContent":["export const LOAD_ALL_USERS = 'LOAD_ALL_USERS';\n\nexport const SUCCESS = '_SUCCESS';\n\nexport const baseURL = 'http://dev.frevend.com/';\nexport const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\nexport const pictureURL = 'http://dev.frevend.com/json/images/u_{{id}}.png';\n\nexport const pageRangeDisplayed = 5;\nexport const itemsCountPerPage = 5;\n\n\n","import {combineReducers} from 'redux'\nimport users from './users'\n\nexport default combineReducers({\n    users\n})","import {LOAD_ALL_USERS, SUCCESS} from '../constants';\n\nexport default (users = [], action) => {\n    const {type, response} = action;\n\n    switch (type) {\n        case LOAD_ALL_USERS + SUCCESS:\n            return [...response.users];\n        default:\n            return users\n\n    }\n}","import {createStore, applyMiddleware} from 'redux';\nimport reducer from '../reducer';\nimport api from '../middlewares/api';\n\nconst enhancer = applyMiddleware(api);\n\nconst store = createStore(reducer, {}, enhancer);\n\nexport default store;","import {SUCCESS} from '../constants';\n\nexport default store => next => action => {\n    const {callAPI, type} = action;\n    if (!callAPI) return next(action);\n\n    fetch(callAPI)\n        .then(res => res.json())\n        .then(response => next({type: type + SUCCESS, response}))\n}","import React, {Component} from 'react';\nimport {Panel, Image} from 'react-bootstrap';\n\nimport {pictureURL} from '../constants'\n\nclass User extends Component {\n\n    render() {\n        const {id, name, surname, desc} = this.props.user;\n        return (\n            <Panel>\n                <Panel.Heading>\n                    <Panel.Title componentClass=\"h3\">{`${name} ${surname}`}</Panel.Title>\n                </Panel.Heading>\n                <Panel.Body>\n                    <Image src={pictureURL.replace('{{id}}', id)} rounded />\n                </Panel.Body>\n                <Panel.Body>\n                    {desc}\n                </Panel.Body>\n            </Panel>\n        );\n    }\n}\n\nexport default User\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Col, Row} from 'react-bootstrap';\n\nimport {itemsCountPerPage} from '../constants';\n\nimport User from './User';\n\n\n\nclass UsersList extends Component {\n\n    render() {\n        const { users } = this.props;\n\n        return (\n            <Row>\n                <Col xs={12}>\n                    {users.map(user => <User key={user.id} user={user}/>)}\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default connect((state, ownProps) => ({\n    users: state.users.filter((user, index) => {\n        return index < ownProps.activePage*itemsCountPerPage && index >= ownProps.activePage*itemsCountPerPage-itemsCountPerPage\n    })\n}))(UsersList);\n","import styled from \"styled-components\";\n\nexport const LoaderWrapper = styled.div`\n      position: absolute;\n      top: calc(50% - 40px);\n      right: calc(50% - 40px);\n`;","import React from 'react';\n\nexport const PageNotFound = () => <h1>Page not found 404</h1>;\n","import React, {Component} from 'react';\nimport {Row, Col} from 'react-bootstrap';\nimport Pagination from \"react-js-pagination\";\nimport { Redirect } from \"react-router-dom\";\n\nimport {itemsCountPerPage, pageRangeDisplayed} from \"../constants\";\nimport {connect} from \"react-redux\";\nimport {loadAllUsers} from \"../AC\";\n\nimport UsersList from './UsersList'\nimport Loader from 'react-loader-spinner';\nimport {LoaderWrapper} from './styled';\nimport {PageNotFound} from './PageNotFound'\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activePage: Number(this.props.match.params.currentPage) || 1\n        };\n        this.handlePageChange = this.handlePageChange.bind(this);\n    }\n\n    handlePageChange(pageNumber) {\n        this.setState({activePage: pageNumber});\n    }\n\n    componentDidMount() {\n        this.props.loadAllUsers();\n    }\n\n    render() {\n        const { users, match } = this.props;\n        const { activePage } = this.state;\n\n        if (!users.length ) return (\n            <LoaderWrapper>\n                <Loader\n                    type=\"Puff\"\n                    color=\"#000\"\n                    height={'100px'}\n                />\n            </LoaderWrapper>\n        );\n        if(users.length && match.params.currentPage > users.length / itemsCountPerPage) return <PageNotFound/>\n        return (\n            <div>\n                <Row>\n                    <UsersList activePage={activePage}/>\n                </Row>\n                <Row>\n                    <Col>\n                        <Pagination\n                            activePage={activePage}\n                            itemsCountPerPage={itemsCountPerPage}\n                            totalItemsCount={users.length}\n                            pageRangeDisplayed={pageRangeDisplayed}\n                            onChange={this.handlePageChange}\n                        />\n                        {Number(match.params.currentPage) !== activePage && <Redirect to={`${activePage}`}/>}\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default connect(state => ({\n    users: state.users\n}), {loadAllUsers})(Home);\n","import {LOAD_ALL_USERS, baseURL, proxyUrl} from '../constants';\n\nexport function loadAllUsers() {\n    return {\n        type: LOAD_ALL_USERS,\n        callAPI: `${proxyUrl}${baseURL}json/users.json`\n    }\n}","import React, {Component} from 'react';\nimport {Provider} from 'react-redux';\nimport {Grid} from 'react-bootstrap'\nimport { HashRouter as Router, Route, Redirect, Switch} from \"react-router-dom\";\n\nimport store from './store';\n\nimport FilterUsers from './components/Home'\n\nclass App extends Component {\n\n    render() {\n        return (\n            <Provider store = {store}>\n                <Router>\n                    <Grid>\n                        <Switch>\n                            <Route path=\"/:currentPage\" render={({match}) => <FilterUsers match ={match} />}/>\n                            <Redirect from=\"/\" to=\"/1\" />\n                        </Switch>\n                    </Grid>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}
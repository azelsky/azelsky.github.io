{"version":3,"sources":["constants.js","reducer/index.js","reducer/users.js","store/index.js","middlewares/api.js","components/User.jsx","components/UsersList.jsx","components/styled/index.js","components/PageNotFound.jsx","components/Pagination.jsx","components/PaginationPage.jsx","AC/index.js","App.js","serviceWorker.js","index.js"],"names":["LOAD_ALL_USERS","baseURL","proxyUrl","combineReducers","users","arguments","length","undefined","action","type","response","Object","toConsumableArray","enhancer","applyMiddleware","store","next","callAPI","fetch","then","res","json","createStore","reducer","User","_this$props$user","this","props","user","id","name","surname","desc","react_default","a","createElement","Panel","Heading","Title","componentClass","concat","Body","Image","src","replace","rounded","Component","UsersList","Col","xs","map","components_User","key","connect","state","ownProps","filter","index","activePage","LoaderWrapper","styled","div","_templateObject","PaginationWrapper","_templateObject2","PaginationItem","_templateObject3","active","PageNotFound","Pagination","prewProps","routePage","handleRoute","counter","_this$props","itemsCountPerPage","totalItemsCount","Math","ceil","pages","page","push","Link","to","toString","buildPages","PaginationPage","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","match","params","currentPage","bind","assertThisInitialized","loadAllUsers","pageNumber","setState","PageNotFound_PageNotFound","Row","components_UsersList","components_Pagination","react_loader_spinner_default","color","height","App","es","HashRouter","Grid","Switch","Route","path","render","_ref","components_PaginationPage","Redirect","from","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7ea94e8.chunk.js","sourcesContent":["export const LOAD_ALL_USERS = 'LOAD_ALL_USERS';\n\nexport const SUCCESS = '_SUCCESS';\n\nexport const baseURL = 'http://dev.frevend.com/';\nexport const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\nexport const pictureURL = 'http://dev.frevend.com/json/images/u_{{id}}.png';\n\nexport const itemsCountPerPage = 5;\n\n\n","import {combineReducers} from 'redux'\nimport users from './users'\n\nexport default combineReducers({\n    users\n})","import {LOAD_ALL_USERS, SUCCESS} from '../constants';\n\nexport default (users = [], action) => {\n    const {type, response} = action;\n\n    switch (type) {\n        case LOAD_ALL_USERS + SUCCESS:\n            return [...response.users];\n        default:\n            return users\n\n    }\n}","import {createStore, applyMiddleware} from 'redux';\nimport reducer from '../reducer';\nimport api from '../middlewares/api';\n\nconst enhancer = applyMiddleware(api);\n\nconst store = createStore(reducer, {}, enhancer);\n\nexport default store;","import {SUCCESS} from '../constants';\n\nexport default store => next => action => {\n    const {callAPI, type} = action;\n    if (!callAPI) return next(action);\n\n    fetch(callAPI)\n        .then(res => res.json())\n        .then(response => next({type: type + SUCCESS, response}))\n}","import React, {Component} from 'react';\nimport {Panel, Image} from 'react-bootstrap';\nimport PropTypes from \"prop-types\";\n\nimport {pictureURL} from '../constants'\n\nclass User extends Component {\n\n    render() {\n        const {id, name, surname, desc} = this.props.user;\n        return (\n            <Panel>\n                <Panel.Heading>\n                    <Panel.Title componentClass=\"h3\">{`${name} ${surname}`}</Panel.Title>\n                </Panel.Heading>\n                <Panel.Body>\n                    <Image src={pictureURL.replace('{{id}}', id)} rounded />\n                </Panel.Body>\n                <Panel.Body>\n                    {desc}\n                </Panel.Body>\n            </Panel>\n        );\n    }\n}\n\nexport default User\n\nUser.propTypes = {\n    user: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        surname: PropTypes.string.isRequired,\n        desc: PropTypes.string.isRequired\n    })\n};\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Col} from 'react-bootstrap';\nimport PropTypes from \"prop-types\";\n\nimport {itemsCountPerPage} from '../constants';\n\nimport User from './User';\n\nclass UsersList extends Component {\n\n    render() {\n        const { users } = this.props;\n        return (\n            <Col xs={12}>\n                {users.map(user => <User key={user.id} user={user}/>)}\n            </Col>\n        );\n    }\n}\n\nexport default connect((state, ownProps) => ({\n    users: state.users.filter((user, index) => {\n        return index < ownProps.activePage*itemsCountPerPage && index >= ownProps.activePage*itemsCountPerPage-itemsCountPerPage\n    })\n}))(UsersList);\n\nUsersList.propTypes = {\n    users: PropTypes.array.isRequired\n};\n","import styled from \"styled-components\";\n\nexport const LoaderWrapper = styled.div`\n    position: absolute;\n    top: calc(50% - 40px);\n    right: calc(50% - 40px);\n`;\n\nexport const PaginationWrapper = styled.div`\n    display: block;\n`;\n\nexport const PaginationItem = styled.div`\n    display: inline-block;\n    border: 1px #888 solid;\n    width: 30px;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;    \n    margin-right: -1px;\n    background-color: ${props => props.active && '#888'};\n`;","import React from 'react';\n\nexport const PageNotFound = () => <h1>Page not found 404</h1>;\n","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {Col} from 'react-bootstrap';\nimport PropTypes from \"prop-types\";\n\nimport {PaginationWrapper, PaginationItem} from './styled';\n\nclass Pagination extends Component {\n\n    componentDidUpdate(prewProps) {\n        if(prewProps.routePage !== this.props.routePage){\n            this.props.handleRoute(this.props.routePage);\n        }\n    }\n\n    buildPages() {\n        const {itemsCountPerPage, totalItemsCount, activePage} = this.props;\n        let counter;\n        if (totalItemsCount % itemsCountPerPage > 0) {\n            counter = Math.ceil(totalItemsCount / itemsCountPerPage);\n        } else counter = totalItemsCount / itemsCountPerPage;\n        let pages = [];\n        for (let page = 1; page <= counter; page++){\n            pages.push(\n                <Link to={`/${page}`} key={page}>\n                    <PaginationItem active={activePage === page.toString()}>{`${page}`}</PaginationItem>\n                </Link>\n            );\n        }\n        return pages;\n    }\n\n    render() {\n        const pages = this.buildPages();\n        return (\n            <Col xs={12}>\n                <PaginationWrapper>\n                    {pages.map(page => page)}\n                </PaginationWrapper>\n            </Col>\n        );\n    }\n}\n\nexport default Pagination;\n\nPagination.propTypes = {\n    activePage: PropTypes.string.isRequired,\n    itemsCountPerPage: PropTypes.number.isRequired,\n    totalItemsCount: PropTypes.number.isRequired,\n    routePage: PropTypes.string,\n    handleRoute: PropTypes.func\n};\n","import React, {Component} from 'react';\nimport {Row} from 'react-bootstrap';\nimport Loader from 'react-loader-spinner';\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport {itemsCountPerPage} from \"../constants\";\nimport {loadAllUsers} from \"../AC\";\n\nimport UsersList from './UsersList'\nimport {LoaderWrapper} from './styled';\nimport {PageNotFound} from './PageNotFound';\nimport Pagination from './Pagination';\n\nclass PaginationPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activePage: this.props.match.params.currentPage\n        };\n        this.handleRoute = this.handleRoute.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.loadAllUsers();\n    }\n\n    handleRoute(pageNumber) {\n        this.setState({activePage: pageNumber});\n    }\n\n    render() {\n        const { users, match } = this.props;\n        const { activePage } = this.state;\n\n        if (!users.length ) return (\n            <LoaderWrapper>\n                <Loader\n                    type=\"Puff\"\n                    color=\"#000\"\n                    height={'100px'}\n                />\n            </LoaderWrapper>\n        );\n        if(users.length && match.params.currentPage > users.length / itemsCountPerPage) return <PageNotFound/>\n        return (\n            <div>\n                <Row>\n                    <UsersList activePage={activePage}/>\n                </Row>\n                <Row>\n                    <Pagination\n                        activePage={activePage}\n                        itemsCountPerPage={itemsCountPerPage}\n                        totalItemsCount={users.length}\n                        routePage={this.props.match.params.currentPage}\n                        handleRoute={this.handleRoute}\n                    />\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default connect(state => ({\n    users: state.users\n}), {loadAllUsers})(PaginationPage);\n\nPaginationPage.propTypes = {\n    users: PropTypes.array.isRequired,\n    match: PropTypes.object.isRequired\n};\n","import {LOAD_ALL_USERS, baseURL, proxyUrl} from '../constants';\n\nexport function loadAllUsers() {\n    return {\n        type: LOAD_ALL_USERS,\n        callAPI: `${proxyUrl}${baseURL}json/users.json`\n    }\n}","import React, {Component} from 'react';\nimport {Provider} from 'react-redux';\nimport {Grid} from 'react-bootstrap'\nimport { HashRouter as Router, Route, Redirect, Switch} from \"react-router-dom\";\n\nimport store from './store';\n\nimport PaginationPage from './components/PaginationPage'\n\nclass App extends Component {\n\n    render() {\n        return (\n            <Provider store = {store}>\n                <Router>\n                    <Grid>\n                        <Switch>\n                            <Route path=\"/:currentPage\" render={({match}) => <PaginationPage match ={match} />}/>\n                            <Redirect from=\"/\" to=\"/1\" />\n                        </Switch>\n                    </Grid>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}